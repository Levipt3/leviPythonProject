# TCP协议
1.应用层对请求数据包做格式定义
2.传输层加端口号，确认应用程序
3.网络层加双方IP地址，确认网络
4.数据链路层加MAC地址，确认链路


# WebSocket协议
1.tcp协议是面向连接的协议，三次握手建立连接，四次挥手断开连接。
    三次握手：建立连接时，客户端发送SYN包，服务器收到后返回SYN+ACK包，客户端再次发送ACK包，连接建立。
    四次挥手：断开连接时，客户端发送FIN包，服务器收到后返回ACK包，服务器发送FIN包，客户端收到后返回ACK包，连接断开。
    1.WebSocket协议是基于tcp协议的，建立连接时，客户端发送HTTP请求，服务器响应HTTP请求，建立连接。
    2.WebSocket协议是基于帧的协议，每个数据包都有头部和数据部分，头部包含数据包的长度、类型、序列号、确认号等信息。
    3.WebSocket协议支持文本、二进制、JSON、XML等多种数据格式。
    4.WebSocket协议支持压缩，减少网络流量。
    5.WebSocket协议支持Ping/Pong机制，用于检测连接是否正常。
    6.WebSocket协议支持跨域资源共享。
    7.WebSocket协议支持多路复用，允许多个客户端同时连接服务器。
    8.WebSocket协议支持自定义帧协议，允许开发者自定义协议。
    9.WebSocket协议支持加密传输，防止数据被窃听。
    10.WebSocket协议支持服务端推送，允许服务器主动向客户端推送消息。
    11.WebSocket协议支持浏览器自动升级，降低兼容性问题。
2.udp协议是无连接的协议，不保证可靠性，适用于实时性要求高的场景。
    无连接：不建立连接，直接发送数据。
    无状态：不保存状态信息，不保证可靠性。
    无序：不保证数据包的顺序。
    无确认：不要求对方确认收到数据。
    适用场景：视频、音频、文件传输、实时通信等。


# Tcp数据包结构
seq：序列号，标识数据包的顺序。
ack：确认号，标识期望收到的下一个数据包的序列号。
flags：标志位，用于标识数据包的类型。
A:ACK,当ACK=1时，表示确认号有效，如果ACK=0，表示确认号无效。
SYN:同步，建立连接时，表示这个报文是一个链接请求还是一个链接接收的请求。
FIN:结束，FIN=1时，表示发送方已经没有数据要发送了，希望断开连接。


# Socket编程
    1.Socket是应用层与TCP/IP协议族通信的接口。
    2.Socket链接过程
        客户端首先发起一个Socket连接请求，连接请求通过系统调用socket()函数发出，并指定要连接的服务器的IP地址和端口号。
        服务器端接收到连接请求后，调用listen()函数，将Socket变为监听状态，等待客户端的连接请求。
        客户端再次调用socket()函数，创建一个新的Socket，并指定要连接的服务器的IP地址和端口号。
        服务器端接收到客户端的连接请求后，调用accept()函数，创建新的Socket，并返回给客户端。
        客户端和服务器端通过send()和recv()函数来进行数据的传输。
        客户端和服务器端通过close()函数关闭Socket连接。


# socket发送tcp数据流程
    1.首先，客户端调用socket()函数创建一个TCP套接字。
    2.然后，客户端调用connect()函数，将TCP套接字绑定到目的地址。
    3.接着，客户端调用send()函数，将数据发送给目的地址。
    4.服务器端调用socket()函数创建一个TCP套接字。
    5.服务器端调用listen()函数，将TCP套接字变为监听状态。
    6.服务器端调用accept()函数，等待客户端的连接请求。
    7.客户端调用connect()函数，将TCP套接字绑定到目的地址。
    8.客户端调用recv()函数，接收数据。
    9.客户端调用send()函数，将数据发送给服务器。
    10.服务器端调用recv()函数，接收数据。
    11.服务器端调用send()函数，将数据发送给客户端。
    12.客户端调用close()函数关闭套接字。
    13.服务器端调用close()函数关闭套接字。


# socket发送udp数据流程
    1.首先，客户端调用socket()函数创建一个UDP套接字。
    2.然后，客户端调用connect()函数，将UDP套接字绑定到目的地址。
    3.接着，客户端调用sendto()函数，将数据发送给目的地址。
    4.服务器端调用socket()函数创建一个UDP套接字。
    5.服务器端调用bind()函数，将UDP套接字绑定到本地地址。
    6.服务器端调用recvfrom()函数，接收数据。
    7.服务器端调用sendto()函数，将数据发送给客户端。
    8.客户端调用recvfrom()函数，接收数据。
    9.客户端调用close()函数关闭套接字。